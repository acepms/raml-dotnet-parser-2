var amf = require('amf-client-js')

function parse(from, url, callback) {
    filePath = url;
    var model = { model: null, error: null };

    amf.AMF.init()
        .then(function () {
            var parser;
            if (from === "raml") {
                parser = amf.Core.parser("RAML 1.0", "application/yaml");
            } else if (from === "oas") {
                parser = amf.Core.parser("OAS 2.0", "application/json");
            } else {
                parser = amf.Core.parser("AMF Graph", "application/ld+json");
            }
            parser.parseFileAsync(url).then(function (amfModel) {
                model.model = mapModel(amfModel);
                return callback(model);
            }).catch(function error(ex) {
                model.error = ex;
                return callback(model);
            });
        })
        .catch(function (ex) {
            throw ex
        });
}

function mapModel(amfModel) {
    var encodes = amfModel.encodes;
    var mappedModel = {
        //raw: amfModel.raw,
        endpoints: mapEndpoints(encodes.endPoints)
    }
    return mappedModel;
}

function mapEndpoints(endpoints){
    if(!endpoints)
        return [];
    
    return endpoints.map(function(endpoint) {
        return {
            name: endpoint.name,
            path: endpoint.path,
            description: endpoint.description,
            operations: mapOperations(endpoint.operations),
            parameters: mapParameters(endpoint.parameters),
            security: mapSecurity(endpoint.security)
        };
    });
}

function mapOperations(operations){
    if(!operations)
        return [];

    return operations.map(function(op){
        return {
            method: op.method,
            name: op.name,
            description: op.description,
            deprecated: op.deprecated,
            summary: op.summary,
            documentation: mapDocumentation(op.documentation),
            schemes: op.schemes,
            accepts: op.accepts,
            contentType: op.contentType,
            request: mapRequest(op.request),
            responses: mapResponses(op.responses),
            security: mapSecurity(op.security)
        };
    });
}

function mapDocumentation(documentation){
    if(!documentation)
        return null;

    return {
        url: documentation.url,
        description: documentation.description,
        title: documentation.title
    };
}

function mapRequest(request){
    if(!request)
        return null;
    
    return {
        queryParameters: mapParameters(request.queryParameters),
        headers: mapParameters(request.headers),
        payloads: mapPayloads(request.payloads),
        queryString: mapShape(request.queryString)
    }
}

function mapResponses(responses){
    if(!responses)
        return [];
    
    return responses.map(function(response){
        return {
            name: response.name,
            description: response.description,
            statusCode: response.statusCode,
            headers: mapParameters(response.headers),
            payloads: mapPayloads(response.payloads),
            examples: mapExamples(response.examples)
        }
    });
}

function mapSecurity(security){
    if(!security)
        return [];
    
    return security.map(function(sec){
        return {
            name: sec.name,
            scheme: mapSecurityScheme(sec.scheme),
            settings: mapSettings(sec.settings)
        }
    });
}

function mapSecurityScheme(scheme){
    if(!scheme)
        return null;
    
    return {
        name: scheme.name,
        type: scheme.type,
        displayName: scheme.displayName,
        description: scheme.description,
        headers: mapParameters(scheme.headers),
        queryParameters: mapParameters(scheme.queryParameters),
        responses: mapResponses(scheme.responses),
        settings: mapSettings(scheme.settings),
        queryString: mapShape(scheme.queryString)
    };
}

function mapSettings(settings){
    if(!settings)
        return null;

    return {
        requestTokenUri: settings.requestTokenUri,
        authorizationUri: settings.authorizationUri,
        tokenCredentialsUri: settings.tokenCredentialsUri,
        signatures: settings.signatures,
        accessTokenUri: settings.accessTokenUri,
        authorizationGrants: settings.authorizationGrants,
        flow: settings.flow,
        scopes: mapScopes(settings.scopes),
        name: settings.name,
        in: settings.in
    }
}

function mapScopes(scopes){
    if(!scopes)
        return [];

    return scopes.map(function(scope){
        return {
            name: scope.name,
            description: scope.description
        };
    });
}

function mapParameters(parameters){
    if(!parameters)
        return [];
    
    return parameters.map(function(param){
        return {
            name: param.name,
            description: param.description,
            required: param.required,
            binding: param.binding,
            schema: mapSchema(param.schema)
        }
    });
}

function mapPayloads(payloads){
    if(!payloads)
        return [];
    
    return payloads.map(function(payload){
        return {
            mediaType: payload.mediaType,
            schema: mapSchema(payload.schema)
        }
    });
}

function mapSchema(schema){
    if(!schema)
        return null;

    var schema = mapShape(schema);
    schema.mediaType = schema.mediaType;
    schema.raw = schema.raw;
    return schema;
}

function mapShape(shape){
    if(!shape)
        return null;
    
    return {
        name: shape.name,
        displayName: shape.displayName,
        description: shape.description,
        default: shape.default,
        values: shape.values,
        inherits: mapShapes(shape.inherits)
    }
}

function mapShapes(shapes){
    if(!shapes)
        return [];
    
    return shapes.map(mapShape);
}

function mapAnyShape(shape){
    if(!shape)
        return null;

    return {
        documentation: mapDocumentation(shape.documentation),
        examples: mapExamples(shape.examples),
        xmlSerialization: mapXmlSerialization(shape.xmlSerialization)
    }
}

function mapExamples(examples){
    if(!examples)
        return [];

    return examples.map(function(example){
        return {
            name: example.name,
            displayName: example.displayName,
            description: example.description,
            value: example.value,
            strict: example.strict,
            mediaType: example.mediaType
        }
    });
}

function mapXmlSerialization(xmlSerialization){
    if(!xmlSerialization)
        return null;
    
    return {
        attribute: xmlSerialization.attribute,
        wrapped: xmlSerialization.wrapped,
        name: xmlSerialization.name,
        namespace: xmlSerialization.namespace,
        prefix: xmlSerialization.prefix
    }
}

exports.parse = parse;